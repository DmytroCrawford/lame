{"version":3,"sources":["candy-machine.ts","Layout/Background/Background.js","Home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CANDY_MACHINE_PROGRAM","anchor","PublicKey","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","TOKEN_METADATA_PROGRAM_ID","awaitTransactionSignatureConfirmation","txid","timeout","connection","a","commitment","queryStatus","done","status","slot","confirmations","err","subId","Promise","resolve","reject","setTimeout","console","log","onSignature","result","context","e","error","getSignatureStatuses","signatureStatuses","value","sleep","_signatureSubscriptions","removeSignatureListener","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","TOKEN_PROGRAM_ID","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","Buffer","from","getCandyMachineState","anchorWallet","candyMachineId","provider","preflightCommitment","fetchIdl","idl","program","candyMachine","id","account","fetch","state","itemsAvailable","toNumber","itemsRedeemed","itemsRemaining","goLiveDate","Date","getMasterEdition","mint","findProgramAddress","toBuffer","getMetadata","getTokenWallet","wallet","mintOneToken","config","treasury","Keypair","generate","publicKey","token","metadata","masterEdition","getMinimumBalanceForRentExemption","MintLayout","span","rent","rpc","mintNft","accounts","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","clock","SYSVAR_CLOCK_PUBKEY","signers","instructions","createAccount","fromPubkey","newAccountPubkey","space","lamports","Token","createInitMintInstruction","createMintToInstruction","shortenAddress","address","chars","slice","ms","Background","className","ConnectButton","styled","WalletDialogButton","CounterText","MintContainer","div","MintButton","Button","renderCounter","days","hours","minutes","seconds","completed","Home","props","useState","balance","setBalance","nftCount","setNftCount","isActive","setIsActive","isSoldOut","setIsSoldOut","isMinting","setIsMinting","mintValue","setMintValue","open","message","severity","undefined","alertState","setAlertState","startDate","setStartDate","useWallet","setCandyMachine","onMint","index","connected","mintTxId","txTimeout","subMessage","msg","code","indexOf","getBalance","LAMPORTS_PER_SOL","getNFTAmount","useEffect","setInterval","signAllTransactions","signTransaction","join","src","toBase58","toLocaleString","Slider","defaultValue","step","min","marks","label","valueLabelDisplay","onChange","event","newValue","toMintValue","Math","floor","valueLabelFormat","disabled","onClick","variant","CircularProgress","date","onMount","onComplete","renderer","Dialog","aria-labelledby","onClose","DialogTitle","IconButton","DialogContent","process","Connection","wsEndpoint","startDateSeed","parseInt","App","endpoint","useMemo","clusterApiUrl","wallets","getPhantomWallet","getSolflareWallet","getSolletWallet","autoConnect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dba23671.chunk.js","sourcesContent":["import * as anchor from \"@project-serum/anchor\";\n\nimport {\n  MintLayout,\n  TOKEN_PROGRAM_ID,\n  Token,\n} from \"@solana/spl-token\";\n\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\n  \"cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ\"\n);\n\nconst SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new anchor.web3.PublicKey(\n  \"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\n);\n\nexport interface CandyMachine {\n  id: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection;\n  program: anchor.Program;\n}\n\ninterface CandyMachineState {\n  candyMachine: CandyMachine;\n  itemsAvailable: number;\n  itemsRedeemed: number;\n  itemsRemaining: number;\n  goLiveDate: Date,\n}\n\nexport const awaitTransactionSignatureConfirmation = async (\n  txid: anchor.web3.TransactionSignature,\n  timeout: number,\n  connection: anchor.web3.Connection,\n  commitment: anchor.web3.Commitment = \"recent\",\n  queryStatus = false\n): Promise<anchor.web3.SignatureStatus | null | void> => {\n  let done = false;\n  let status: anchor.web3.SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log(\"Rejecting for timeout...\");\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n        txid,\n        (result: any, context: any) => {\n          done = true;\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0,\n          };\n          if (result.err) {\n            console.log(\"Rejected via websocket\", result.err);\n            reject(status);\n          } else {\n            console.log(\"Resolved via websocket\", result);\n            resolve(status);\n          }\n        },\n        commitment\n      );\n    } catch (e) {\n      done = true;\n      console.error(\"WS error in setup\", txid, e);\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log(\"REST null result for\", txid, status);\n            } else if (status.err) {\n              console.log(\"REST error for\", txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log(\"REST no confirmations for\", txid, status);\n            } else {\n              console.log(\"REST confirmation for\", txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log(\"REST connection error: txid\", txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId]) {\n    connection.removeSignatureListener(subId);\n  }\n  done = true;\n  console.log(\"Returning status\", status);\n  return status;\n}\n\n/* export */ const createAssociatedTokenAccountInstruction = (\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey\n) => {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new anchor.web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n}\n\nexport const getCandyMachineState = async (\n  anchorWallet: anchor.Wallet,\n  candyMachineId: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection,\n): Promise<CandyMachineState> => {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: \"recent\",\n  });\n\n  const idl = await anchor.Program.fetchIdl(\n    CANDY_MACHINE_PROGRAM,\n    provider\n  );\n\n  const program = new anchor.Program(idl, CANDY_MACHINE_PROGRAM, provider);\n  const candyMachine = {\n    id: candyMachineId,\n    connection,\n    program,\n  }\n\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\n\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\n\n  let goLiveDate = state.data.goLiveDate.toNumber();\n  goLiveDate = new Date(goLiveDate * 1000);\n\n  console.log({\n    itemsAvailable,\n    itemsRedeemed,\n    itemsRemaining,\n    goLiveDate,\n  })\n\n  return {\n    candyMachine,\n    itemsAvailable,\n    itemsRedeemed,\n    itemsRemaining,\n    goLiveDate,\n  };\n}\n\nconst getMasterEdition = async (\n  mint: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from(\"edition\"),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nconst getMetadata = async (\n  mint: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nconst getTokenWallet = async (\n  wallet: anchor.web3.PublicKey,\n  mint: anchor.web3.PublicKey\n) => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [wallet.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n    )\n  )[0];\n};\n\nexport const mintOneToken = async (\n  candyMachine: CandyMachine,\n  config: anchor.web3.PublicKey, // feels like this should be part of candyMachine?\n  payer: anchor.web3.PublicKey,\n  treasury: anchor.web3.PublicKey,\n): Promise<string> => {\n  const mint = anchor.web3.Keypair.generate();\n  const token = await getTokenWallet(payer, mint.publicKey);\n  const { connection, program } = candyMachine;\n  const metadata = await getMetadata(mint.publicKey);\n  const masterEdition = await getMasterEdition(mint.publicKey);\n\n  const rent = await connection.getMinimumBalanceForRentExemption(\n    MintLayout.span\n  );\n\n  return await program.rpc.mintNft({\n    accounts: {\n      config,\n      candyMachine: candyMachine.id,\n      payer: payer,\n      wallet: treasury,\n      mint: mint.publicKey,\n      metadata,\n      masterEdition,\n      mintAuthority: payer,\n      updateAuthority: payer,\n      tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      systemProgram: anchor.web3.SystemProgram.programId,\n      rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n      clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n    },\n    signers: [mint],\n    instructions: [\n      anchor.web3.SystemProgram.createAccount({\n        fromPubkey: payer,\n        newAccountPubkey: mint.publicKey,\n        space: MintLayout.span,\n        lamports: rent,\n        programId: TOKEN_PROGRAM_ID,\n      }),\n      Token.createInitMintInstruction(\n        TOKEN_PROGRAM_ID,\n        mint.publicKey,\n        0,\n        payer,\n        payer\n      ),\n      createAssociatedTokenAccountInstruction(\n        token,\n        payer,\n        payer,\n        mint.publicKey\n      ),\n      Token.createMintToInstruction(\n        TOKEN_PROGRAM_ID,\n        mint.publicKey,\n        token,\n        payer,\n        [],\n        1\n      ),\n    ],\n  });\n}\n\nexport const shortenAddress = (address: string, chars = 4): string => {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}","import React from \"react\";\r\nimport \"./Background.css\";\r\n\r\nconst Background = () => {\r\n  return (\r\n    <div className=\"container\">\r\n    </div>\r\n  );\r\n};\r\n\r\nBackground.propTypes = {};\r\n\r\nexport default Background;\r\n","import { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Countdown from \"react-countdown\";\nimport { Button, CircularProgress, Snackbar } from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport * as anchor from \"@project-serum/anchor\";\n\nimport { LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\nimport {\n  CandyMachine,\n  awaitTransactionSignatureConfirmation,\n  getCandyMachineState,\n  mintOneToken,\n  shortenAddress,\n} from \"./candy-machine\";\n\nimport \"./Home.css\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Link from \"@material-ui/core/Link\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport CheckCircleOutlinedIcon from \"@material-ui/icons/CheckCircleOutlined\";\nimport ErrorOutlineOutlinedIcon from \"@material-ui/icons/ErrorOutlineOutlined\";\nimport WarningOutlinedIcon from \"@material-ui/icons/WarningOutlined\";\nimport InfoOutlinedIcon from \"@material-ui/icons/InfoOutlined\";\nimport CloseOutlinedIcon from \"@material-ui/icons/CloseOutlined\";\nimport Header from \"./Layout/Header/Header\";\nimport Background from \"./Layout/Background/Background\";\nimport Slider from \"@mui/material/Slider\";\nimport { BsInfoCircle } from \"react-icons/bs\";\n\n\n\nconst ConnectButton = styled(WalletDialogButton)``;\n\nconst CounterText = styled.span``; // add your styles here\n\nconst MintContainer = styled.div``; // add your styles here\n\nconst MintButton = styled(Button)``; // add your styles here\n\nexport interface HomeProps {\n  candyMachineId: anchor.web3.PublicKey;\n  config: anchor.web3.PublicKey;\n  connection: anchor.web3.Connection;\n  startDate: number;\n  treasury: anchor.web3.PublicKey;\n  txTimeout: number;\n}\n\nconst Home = (props: HomeProps) => {\n  const [balance, setBalance] = useState<number>();\n  const [nftCount, setNftCount] = useState<number>(0);\n  const [isActive, setIsActive] = useState(false); // true when countdown completes\n  const [isSoldOut, setIsSoldOut] = useState(false); // true when items remaining is zero\n  const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\n  const [mintValue, setMintValue] = useState(1);\n\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: \"\",\n    severity: undefined,\n  });\n\n  const [startDate, setStartDate] = useState(new Date(props.startDate));\n\n  const wallet = useWallet();\n  const [candyMachine, setCandyMachine] = useState<CandyMachine>();\n\n  const onMint = async () => {\n\n    for (let index = 0; index < mintValue; index++) { \n      try {\n        setIsMinting(true);\n        if (wallet.connected && candyMachine?.program && wallet.publicKey) {\n          const mintTxId = await mintOneToken(\n            candyMachine,\n            props.config,\n            wallet.publicKey,\n            props.treasury\n          );\n  \n          const status = await awaitTransactionSignatureConfirmation(\n            mintTxId,\n            props.txTimeout,\n            props.connection,\n            \"singleGossip\",\n            false\n          );\n  \n          if (!status?.err) {\n            setAlertState({\n              open: true,\n              message: \"Congratulations, Successfully Minted.\",\n              subMessage: `If you want to mint one more, press \"MINT\" again.`,\n              severity: \"success\",\n            });\n          } else {\n            setAlertState({\n              open: true,\n              message: \"Error\",\n              subMessage: \"Minting failed!! Please try again.\",\n              severity: \"error\",\n            });\n          }\n        }\n      } catch (error: any) {\n        // TODO: blech:\n        let message = \"Error\";\n        let subMessage = error.msg || \"Minting failed!! Please try again.\";\n        if (!error.msg) {\n          if (error.message.indexOf(\"0x138\")) {\n          } else if (error.message.indexOf(\"0x137\")) {\n            subMessage = `SOLD OUT!`;\n          } else if (error.message.indexOf(\"0x135\")) {\n            subMessage = `Insufficient funds to mint!! Please fund your wallet.`;\n          }\n        } else {\n          if (error.code === 311) {\n            subMessage = `SOLD OUT!`;\n            setIsSoldOut(true);\n          } else if (error.code === 312) {\n            subMessage = `Minting period hasn't started yet.`;\n          }\n        }\n  \n        setAlertState({\n          open: true,\n          message,\n          subMessage,\n          severity: \"error\",\n        });\n      } finally {\n        if (wallet?.publicKey) {\n          const balance = await props.connection.getBalance(wallet?.publicKey);\n          setBalance(balance / LAMPORTS_PER_SOL);\n          await getNFTAmount();\n        }\n        setIsMinting(false);\n      }\n    }\n    \n  };\n\n  useEffect(() => {\n    (async () => {\n      if (wallet?.publicKey) {\n        const balance = await props.connection.getBalance(wallet.publicKey);\n        setBalance(balance / LAMPORTS_PER_SOL);\n        await getNFTAmount();\n      }\n    })();\n  }, [wallet, props.connection]);\n\n  useEffect(() => {\n    (async () => {\n      setInterval(async () => {\n        await getNFTAmount();\n      }, 20000);\n    })();\n  });\n\n  useEffect(() => {\n    (async () => {\n      if (isSoldOut) {\n        setAlertState({\n          open: true,\n          message: \"SOLD OUT\",\n          subMessage: `Thanks for minting from public sale.`,\n          severity: \"success\",\n        });\n      }\n    })();\n  }, [isSoldOut]);\n\n  useEffect(() => {\n    (async () => {\n      if (\n        !wallet ||\n        !wallet.publicKey ||\n        !wallet.signAllTransactions ||\n        !wallet.signTransaction\n      ) {\n        return;\n      }\n\n      const anchorWallet = {\n        publicKey: wallet.publicKey,\n        signAllTransactions: wallet.signAllTransactions,\n        signTransaction: wallet.signTransaction,\n      } as anchor.Wallet;\n\n      const { candyMachine, goLiveDate, itemsRemaining } =\n        await getCandyMachineState(\n          anchorWallet,\n          props.candyMachineId,\n          props.connection\n        );\n\n      setIsSoldOut(itemsRemaining === 0);\n      setStartDate(goLiveDate);\n      setCandyMachine(candyMachine);\n    })();\n  }, [wallet, props.candyMachineId, props.connection]);\n\n  const getNFTAmount = async () => {\n    const anchorWallet = {\n      publicKey: wallet.publicKey,\n      signAllTransactions: wallet.signAllTransactions,\n      signTransaction: wallet.signTransaction,\n    } as anchor.Wallet;\n\n    const { itemsRemaining} = await getCandyMachineState(\n      anchorWallet,\n      props.candyMachineId,\n      props.connection\n    );\n   \n     let count = 333 - itemsRemaining;   \n\n    setNftCount(count)\n    setIsSoldOut(itemsRemaining === 0);\n  };\n\n  const mintRange = [\n    {\n      value: 0,\n      label: \"1\",\n    },\n    {\n      value: 25,\n      label: \"2\",\n    },\n    {\n      value: 50,\n      label: \"3\",\n    },\n    {\n      value: 75,\n      label: \"4\",\n    },\n    {\n      value: 100,\n      label: \"5\",\n    },\n  ];\n\n  const onSliderValueChange = (event: any, newValue: any) => {\n    let toMintValue =Math.floor(newValue / 25) == 0 ? 1 : Math.floor(newValue / 25) + 1;\n    setMintValue(toMintValue);\n  };\n\n  return (\n      <div className=\"page-container\">\n      <div className=\"page-bg\"></div>\n      <section className=\"page-section\">\n      <div className=\"section-body\">\n      <div className=\"section-content\">\n        <div className=\"flex-column\">\n          <span className= {[\n                \"mint-section-title title-center\",\n                wallet.connected ? \"wallet-connected-title\" : \"\",\n              ].join(\" \")}><img id=\"adjust\" src=\"Logo/logo1.png\"></img></span>\n                 <div className=\"mint-row-center\">\n            {wallet.connected && (\n              <span className=\"wallet-address\">Wallet Address: {shortenAddress(wallet.publicKey?.toBase58() || \"\")}</span>\n            )}\n          </div>\n          <div className=\"mint-desc-grid\">\n            <div className=\"mint-desc-container\">\n              <span className=\"mint-desc-heading\">Wallet Balance</span>\n              {!wallet.connected ? (\n                <span className=\"mint-desc-value\">0.00 SOL</span>\n                ) : (\n                <span className=\"mint-desc-value\">{(balance || 0).toLocaleString()}</span>\n              )}\n            </div>\n            <div className=\"mint-desc-container\">\n              <span className=\"mint-desc-heading\">NFT Price</span>\n              <span className=\"mint-desc-value\">1 SOL</span>\n            </div>\n            <div className=\"mint-desc-container\">\n              <span className=\"mint-desc-heading\">NFTs Minted</span>\n              {!wallet.connected ? (\n                <span className=\"mint-desc-value\">0</span>\n                ) : (\n                <span className=\"mint-desc-value\">{nftCount}</span>\n              )}\n            </div>\n          </div>\n          <div className=\"mint-row-center\">\n            {!wallet.connected && (\n              <ConnectButton className=\"connect-wallet-btn\">\n                Connect Wallet\n              </ConnectButton>\n            )}\n          </div>\n       \n          <MintContainer className=\"mintContainer\">\n          {wallet.connected && (\n            <div className=\"flex-column\">\n              <div className=\"mint-slider-container\">\n              <div className=\"mint-slider\">\n              <Slider\n                          className=\"slider-css\"\n                          defaultValue={0}\n                          step={25}\n                          min={1}\n                          marks={mintRange}\n                          valueLabelDisplay=\"on\"\n                          onChange={onSliderValueChange}\n                          valueLabelFormat={(value) => (\n                            <div>\n                              {Math.floor(value / 25) == 0\n                                ? 1\n                                : Math.floor(value / 25) + 1}\n                            </div>\n                          )}\n                        />\n              </div>\n              <MintButton\n                  className=\"mint-btn\"\n                  disabled={isSoldOut || isMinting || !isActive}\n                  onClick={onMint}\n                  variant=\"contained\"\n                >\n                  {isSoldOut ? (\n                    \"Sold Out\"\n                  ) : isActive ? (\n                    isMinting ? (\n                      <CircularProgress />\n                    ) : (\n                      <span> {mintValue} Mint</span>\n                    )\n                  ) : (\n                    <Countdown\n                      date={startDate}\n                      onMount={({ completed }) =>\n                        completed && setIsActive(true)\n                      }\n                      onComplete={() => setIsActive(true)}\n                      renderer={renderCounter}\n                    />\n                  )}\n                </MintButton>\n              </div>\n            </div>\n          )}\n        </MintContainer>\n        </div>\n      </div>\n    </div>\n      </section>\n      <Background />\n\n      <Dialog\n        className=\"messageContainer\"\n        aria-labelledby=\"confirmation-dialog-title\"\n        open={alertState.open}\n        onClose={() => setAlertState({ ...alertState, open: false })}\n      >\n        <DialogTitle className=\"dialogHeading\" id=\"confirmation-dialog-title\">\n          <div className=\"flexRowBetween\">\n            <span className=\"dialogTitle\"></span>\n            <IconButton\n              onClick={() => setAlertState({ ...alertState, open: false })}\n            >\n              <CloseOutlinedIcon className=\"dialogCloseIcon\" />\n            </IconButton>\n          </div>\n        </DialogTitle>\n        <DialogContent>\n          <div className=\"flexColumnCenter\">\n            {alertState.severity === \"error\" && (\n              <ErrorOutlineOutlinedIcon className=\"errorIcon\" />\n            )}\n            {alertState.severity === \"success\" && (\n              <CheckCircleOutlinedIcon className=\"successIcon\" />\n            )}\n            {alertState.severity === \"warning\" && (\n              <WarningOutlinedIcon className=\"warningIcon\" />\n            )}\n            {alertState.severity === \"info\" && (\n              <InfoOutlinedIcon className=\"infoIcon\" />\n            )}\n            <span\n              className={[\n                \"default-class\",\n                alertState.severity === \"error\" ? \"errorMsg\" : \"\",\n                alertState.severity === \"success\" ? \"successMsg\" : \"\",\n                alertState.severity === \"warning\" ? \"warningMsg\" : \"\",\n                alertState.severity === \"info\" ? \"infoMsg\" : \"\",\n              ].join(\" \")}\n            >\n              {alertState.message}\n            </span>\n            <span\n              className={[\n                \"subMessage\",\n                alertState.severity === \"error\" ? \"errorMsg\" : \"\",\n                alertState.severity === \"success\" ? \"successMsg\" : \"\",\n                alertState.severity === \"warning\" ? \"warningMsg\" : \"\",\n                alertState.severity === \"info\" ? \"infoMsg\" : \"\",\n              ].join(\" \")}\n            >\n              {alertState.subMessage}\n            </span>\n          </div>\n        </DialogContent>\n      </Dialog> \n    </div>\n  );\n};\n\ninterface AlertState {\n  open: boolean;\n  message: string;\n  subMessage?: string;\n  severity: \"success\" | \"info\" | \"warning\" | \"error\" | undefined;\n}\n\nconst renderCounter = ({ days, hours, minutes, seconds, completed }: any) => {\n  return (\n    <CounterText>\n      {hours} hours, {minutes} minutes, {seconds} seconds\n    </CounterText>\n  );\n};\n\nexport default Home;\n","import \"./App.css\";\nimport { useMemo } from \"react\";\n\nimport Home from \"./Home\";\n\nimport * as anchor from \"@project-serum/anchor\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport {\n  getPhantomWallet,\n  getSolflareWallet,\n  getSolletWallet,\n} from \"@solana/wallet-adapter-wallets\";\n\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from \"@solana/wallet-adapter-react\";\n\nimport { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\n\nconst treasury = new anchor.web3.PublicKey(\n  process.env.REACT_APP_TREASURY_ADDRESS!\n);\n\nconst config = new anchor.web3.PublicKey(\n  process.env.REACT_APP_CANDY_MACHINE_CONFIG!\n);\n\nconst candyMachineId = new anchor.web3.PublicKey(\n  process.env.REACT_APP_CANDY_MACHINE_ID!\n);\n\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\n\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\nconst connection = new anchor.web3.Connection(rpcHost, {\n  wsEndpoint: \"wss://winter-autumn-sea.solana-mainnet.quiknode.pro/ebdb32e07797d3bf68556b0b63788f9af5374121/\"\n});\n\nconst startDateSeed = parseInt(process.env.REACT_APP_CANDY_START_DATE!, 10);\n\nconst txTimeout = 30000; // milliseconds (confirm this works for your project)\n\nconst App = () => {\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\n\n  const wallets = useMemo(\n    () => [getPhantomWallet(), getSolflareWallet(), getSolletWallet()],\n    []\n  );\n\n  return (\n    <ConnectionProvider endpoint={endpoint}>\n      <WalletProvider wallets={wallets} autoConnect>\n        <WalletDialogProvider>\n          <Home\n            candyMachineId={candyMachineId}\n            config={config}\n            connection={connection}\n            startDate={startDateSeed}\n            treasury={treasury}\n            txTimeout={txTimeout}\n          />\n        </WalletDialogProvider>\n      </WalletProvider>\n    </ConnectionProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}